@page "/recent"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ClipShare.Client.Components
@using ClipShare.Shared.Models
@attribute [Authorize]
@inject HttpClient Http

<h2>Recent Clips</h2>

<AddClipButton OnClipAdded="ClipAdded"></AddClipButton>

@if (Clips == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mt-4">
        @if (Clips.Count > 0)
        {
            foreach (var group in Clips.OrderByDescending(x => x.Timestamp).GroupBy(x => x.Timestamp.Date))
            {
                <div class="lead mt-4">@group.Key.ToShortDateString()</div>
                <div class="row">
                    @foreach (var clip in group)
                    {
                        <ClipCard ClipData="clip" OnClipDeleted="ClipDeleted"></ClipCard>
                    }
                </div>
            }
        }
        else
        {
            <ClipCard ClipData="DemoClip"></ClipCard>
        }

    </div>

}

@code {

    private List<Clip> Clips { get; } = new List<Clip>();

    private Clip DemoClip
    {
        get
        {
            return new Clip()
            {
                Timestamp = DateTimeOffset.Now,
                Content = "Click the Add button to start saving clips."
            };
        }
    }

    private void ClipAdded(Clip clip)
    {
        Clips.Add(clip);
    }

    private void ClipDeleted(Clip clipData)
    {
        Clips.RemoveAll(x => x.Id == clipData.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var clips = await Http.GetFromJsonAsync<Clip[]>("Clips");
            if (clips?.Any() == true)
            {
                Clips.AddRange(clips);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}
