@page "/recent"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IClipStore ClipStore
@inject HttpClient Http

<h2>Recent Clips</h2>

<AddClipButton OnClipAdded="ClipAdded"></AddClipButton>

@if (!_dataLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mt-4">
        @if (_clips.Any(x => x.ArchiveFolder == null))
        {
            foreach (var group in _clips
            .Where(x => x.ArchiveFolder == null)
            .OrderByDescending(x => x.Timestamp)
            .GroupBy(x => x.Timestamp.Date))
            {
                <div class="lead mt-4">@group.Key.ToShortDateString()</div>
                <div class="row">
                    @foreach (var clip in group)
                    {
                        <ClipCard ClipData="clip" ArchiveFolders="_archiveFolders" OnClipDeleted="ClipDeleted" OnClipChanged="ClipChanged"></ClipCard>
                    }
                </div>
            }
        }
        else
        {
            <ClipCard ClipData="_demoClip"></ClipCard>
        }

    </div>

}

@code {
    private readonly Clip _demoClip = new Clip()
    {
        Timestamp = DateTimeOffset.Now,
        Content = "Click the Add button to start saving clips."
    };

    private readonly List<ArchiveFolder> _archiveFolders = new();
    private readonly List<Clip> _clips = new();

    private bool _dataLoaded;


    private void ClipAdded(Clip clip)
    {
        _clips.Add(clip);
    }

    private void ClipChanged(Clip clipData)
    {
        var index = _clips.FindIndex(x => x.Id == clipData.Id);
        if (index > -1)
        {
            _clips[index] = clipData;
            StateHasChanged();
        }
    }

    private void ClipDeleted(Clip clipData)
    {
        _clips.RemoveAll(x => x.Id == clipData.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var clips = await ClipStore.GetUnarchivedClips();
            if (clips.Any())
            {
                _clips.AddRange(clips);
            }

            var folders = await ClipStore.GetFolders();
            if (folders.Any())
            {
                _archiveFolders.AddRange(folders);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            _dataLoaded = true;
        }
    }

}
