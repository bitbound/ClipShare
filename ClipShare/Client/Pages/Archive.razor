@page "/archive"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h2>Archive</h2>

@if (Clips == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="mt-4">
    @if (Clips.Count > 0)
    {
        foreach (var folder in ArchiveFolders.OrderBy(x => x.Name))
        {
            <div class="lead mt-4">
                @folder.Name
                <button type="button" class="close ml-4" aria-hidden="true" style="float:none"
                        @onclick="async () => await DeleteFolder(folder)">&times;</button>
            </div>
            @foreach (var clip in Clips
               .Where(x => x.ArchiveFolderId == folder.Id)
               .OrderByDescending(x => x.Timestamp))
            {
                <ClipCard ClipData="clip" ArchiveFolders="ArchiveFolders" OnClipDeleted="ClipDeleted" OnClipChanged="ClipChanged"></ClipCard>
            }
        }
    }
    else
    {
        <ClipCard ClipData="DemoClip"></ClipCard>
    }

</div>

}

@code {
    private List<ArchiveFolder> ArchiveFolders { get; } = new List<ArchiveFolder>();

    private List<Clip> Clips { get; } = new List<Clip>();

    private Clip DemoClip
    {
        get
        {
            return new Clip()
            {
                Timestamp = DateTimeOffset.Now,
                Content = "Click the Add button to start saving clips."
            };
        }
    }

    private void ClipAdded(Clip clip)
    {
        Clips.Add(clip);
    }

    private void ClipDeleted(Clip clipData)
    {
        Clips.RemoveAll(x => x.Id == clipData.Id);
    }

    private void ClipChanged(Clip clipData)
    {
        var index = Clips.FindIndex(x => x.Id == clipData.Id);
        if (index > -1)
        {
            Clips[index] = clipData;
            StateHasChanged();
        }
    }

    private async Task DeleteFolder(ArchiveFolder folder)
    {
        var confirmMessage = $"Are you sure you want to delete folder {folder.Name} and all its clips?";
        var result = await JsRuntime.InvokeAsync<bool>("invokeConfirm", confirmMessage);
        if (result)
        {
            var response = await Http.DeleteAsync($"Archives?folderId={folder.Id}");
            if (response.IsSuccessStatusCode)
            {
                ArchiveFolders.Remove(folder);
                StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var clips = await Http.GetFromJsonAsync<Clip[]>("Clips");
            if (clips?.Any() == true)
            {
                Clips.AddRange(clips);
            }

            var folders = await Http.GetFromJsonAsync<List<ArchiveFolder>>("Archives");
            if (folders?.Any() == true)
            {
                ArchiveFolders.AddRange(folders);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
