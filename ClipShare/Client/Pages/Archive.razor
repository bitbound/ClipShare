@page "/archive"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject IClipStore ClipStore
@inject IJSRuntime JsRuntime

<h2>Archive</h2>

@if (!_dataLoaded)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mt-4">
        @if (_archiveFolders.Any())
        {
            foreach (var folder in _archiveFolders.OrderBy(x => x.Name))
            {
                <div class="lead mt-4">
                    @folder.Name
                    <button type="button" 
                        class="btn btn-sm btn-danger ms-4" 
                        aria-hidden="true" 
                        style="float:none" 
                        title="Delete Folder"
                        @onclick="async () => await DeleteFolder(folder)">
                        &times;
                    </button>
                </div>
                @foreach (var clip in _clips
                   .Where(x => x.ArchiveFolderId == folder.Id)
                   .OrderByDescending(x => x.Timestamp))
                {
                    <ClipCard ClipData="clip" ArchiveFolders="_archiveFolders" OnClipDeleted="ClipDeleted" OnClipChanged="ClipChanged"></ClipCard>
                }
            }
        }
        else
        {
            <p>Archive clips on the Recent page, and they will show up here.</p>
        }

    </div>

}

@code {
    private bool _dataLoaded;

    private readonly List<Clip> _clips = new();
    private readonly List<ArchiveFolder> _archiveFolders = new();

    private void ClipAdded(Clip clip)
    {
        _clips.Add(clip);
    }

    private void ClipDeleted(Clip clipData)
    {
        _clips.RemoveAll(x => x.Id == clipData.Id);
    }

    private void ClipChanged(Clip clipData)
    {
        var index = _clips.FindIndex(x => x.Id == clipData.Id);
        if (index > -1)
        {
            _clips[index] = clipData;
            StateHasChanged();
        }
    }

    private async Task DeleteFolder(ArchiveFolder folder)
    {
        var confirmMessage = $"Are you sure you want to delete folder {folder.Name} and all its clips?";
        var result = await JsRuntime.InvokeAsync<bool>("invokeConfirm", confirmMessage);
        if (result)
        {
            var deleteResult = await ClipStore.DeleteFolder(folder.Id);
            if (deleteResult)
            {
                _archiveFolders.Remove(folder);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var clips = await ClipStore.GetArchivedClips();
            if (clips.Any())
            {
                _clips.AddRange(clips);
            }

            var folders = await ClipStore.GetFolders();
            if (folders.Any())
            {
                _archiveFolders.AddRange(folders);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            _dataLoaded = true;
        }
    }
}
