<div class="modal fade  @(_modalShowClass)" style="@(_modalDisplayStyle)">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Header</h5>
                <button type="button" class="btn btn-sm btn-close" data-dismiss="modal" aria-hidden="true" @onclick="ModalCancelled"></button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
            <div class="modal-footer">
                @if (!string.IsNullOrWhiteSpace(OkButtonText))
            {
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="ModalOkayed">@OkButtonText</button>
            }
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="ModalCancelled">Close</button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public Func<Task>? OnModalCancelled { get; set; }

    [Parameter]
    public Func<Task>? OnModalOkayed { get; set; }


    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Header { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? OkButtonText { get; set; }

    private string _modalDisplayStyle = string.Empty;
    private string _modalShowClass = string.Empty;


    public void ShowModal()
    {
        _modalShowClass = "show";
        _modalDisplayStyle = "display: block;";
        StateHasChanged();
    }

    private async Task ModalCancelled()
    {
        _modalShowClass = "";
        await Task.Delay(500);
        _modalDisplayStyle = "display: none;";
        if (OnModalCancelled is not null)
        {
            await OnModalCancelled.Invoke();
        }
    }

    private async Task ModalOkayed()
    {
        _modalShowClass = "";
        await Task.Delay(500);
        _modalDisplayStyle = "display: none;";
        if (OnModalOkayed is not null)
        {
            await OnModalOkayed.Invoke();
        }
}

protected override Task OnInitializedAsync()
{

    return base.OnInitializedAsync();
}
}
