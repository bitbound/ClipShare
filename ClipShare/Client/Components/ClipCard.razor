@inject IClipboardService Clipboard
@inject IToastService Toasts
@inject HttpClient Http

<div class="card border-secondary my-3 mr-3 clip-card" style="width: 20rem; position:unset;">
    <div class="card-header small">
        @ClipData.Timestamp.LocalDateTime.ToString()
        <i class="oi oi-x float-right header-button ml-3" title="Delete" @onclick="DeleteClicked"></i>
        <i class="oi oi-pencil float-right header-button" title="Edit Text" @onclick="ShowEditModal"></i>
    </div>
    <div class="card-body">
        <div class="text-center mb-4">
            <i class="oi oi-clipboard copy-button" title="Copy Text" @onclick="CopyText"></i>
        </div>
        <p class="card-text">@GetDisplayContent()</p>

    </div>
</div>

<Modal Header="Edit Clip" OkButtonText="Save" @ref="ClipModal" OnModalOkayed="SaveEdits" OnModalCancelled="CancelEdits">
    <EditForm EditContext="editContext">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <h5>Content</h5>
        <div class="form-group">
            <InputTextArea class="w-100" @bind-Value="ClipData.Content"></InputTextArea>
        </div>
        <h5>Archive to Folder</h5>
        <div class="form-group">
            <select class="form-control" @onchange="ArchiveFolderChanged">
                <option>Select an archive folder...</option>

                @foreach (var archive in ArchiveFolders.OrderBy(x=>x.Name))
                {
                    if (archive.Id == ClipData.ArchiveFolderId)
                    {
                        <option value="@archive.Id" selected="selected">@archive.Name</option>
                    }
                    else
                    {
                        <option value="@archive.Id">@archive.Name</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <input @bind="newArchiveName" class="form-control" placeholder="Create a new archive folder..." @onkeypress="NewArchiveInputKeyPress" />
            <div class="text-right mt-2">
                <button class="btn btn-secondary" @onclick="CreateNewArchiveFolder">Add</button>
            </div>
        </div>
    </EditForm>
</Modal>

@code {

    private List<ArchiveFolder> ArchiveFolders { get; } = new List<ArchiveFolder>();

    private EditContext editContext;

    private string previousContent;

    private string newArchiveName;

    [Parameter]
    public EventCallback<Clip> OnClipDeleted { get; set; }


    [Parameter]
    public Clip ClipData { get; set; }

    private Modal ClipModal { get; set; }


    private void ArchiveFolderChanged(ChangeEventArgs args)
    {
        if (int.TryParse(args.Value.ToString(), out var result))
        {
            ClipData.ArchiveFolderId = result;
            ClipData.ArchiveFolder = ArchiveFolders.FirstOrDefault(x => x.Id == result);
        }
        else
        {
            ClipData.ArchiveFolderId = null;
            ClipData.ArchiveFolder = null;

        }
    }

    private Task CancelEdits()
    {
        ClipData.Content = previousContent;
        return Task.CompletedTask;
    }

    private async Task CopyText()
    {
        await Clipboard.SetClipboardText(ClipData.Content);
        Toasts.ShowToast("Copied to clipboard!", TimeSpan.FromSeconds(3));
    }

    private async Task CreateNewArchiveFolder()
    {
        if (string.IsNullOrWhiteSpace(newArchiveName))
        {
            Toasts.ShowToast("Archive folder name required.", TimeSpan.FromSeconds(3), "bg-warning");
            return;
        }
        if (newArchiveName.Length > ArchiveFolder.MaxNameLength)
        {
            Toasts.ShowToast($"Name must be less than {ArchiveFolder.MaxNameLength} characters.", TimeSpan.FromSeconds(3), "bg-warning");
            return;
        }

        var response = await Http.PostAsJsonAsync("Archives", newArchiveName);
        if (response.IsSuccessStatusCode)
        {
            var newFolder = await response.Content.ReadFromJsonAsync<ArchiveFolder>();
            if (newFolder != null)
            {
                ArchiveFolders.Add(newFolder);
            }
        }

        newArchiveName = null;

        StateHasChanged();
    }

    private async Task DeleteClicked()
    {
        var response = await Http.DeleteAsync($"Clips?id={ClipData.Id}");
        if (response.IsSuccessStatusCode)
        {
            await OnClipDeleted.InvokeAsync(ClipData);
        }
    }

    private string GetDisplayContent()
    {
        if (ClipData.Content.Length < 500)
        {
            return ClipData.Content;
        }
        else
        {
            return new string(ClipData.Content.ToCharArray().Take(500).ToArray()) + " . . .";
        }
    }

    private async Task NewArchiveInputKeyPress(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter", StringComparison.OrdinalIgnoreCase))
        {
            await CreateNewArchiveFolder();
        }
    }

    private async Task SaveEdits()
    {
        if (!editContext.Validate())
        {
            ClipData.Content = previousContent;
            Toasts.ShowToast("Clipboard is too large.", TimeSpan.FromSeconds(3), "bg-danger");
            StateHasChanged();
            return;
        }

        var response = await Http.PutAsJsonAsync("Clips", ClipData, System.Threading.CancellationToken.None);
        if (response.IsSuccessStatusCode)
        {
            StateHasChanged();
        }
    }

    private void ShowEditModal()
    {
        previousContent = ClipData.Content;
        ClipModal.ShowModal();
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(ClipData);
        ArchiveFolders.AddRange(await Http.GetFromJsonAsync<List<ArchiveFolder>>("Archives"));
    }
}
