@inject IClipboardService ClipboardService
@inject IToastService ToastService
@inject HttpClient Http

<div class="card border-secondary my-3 mr-3 clip-card" style="width: 20rem; position:unset;">
    <div class="card-header small">
        @Timestamp.LocalDateTime.ToString()
        <i class="oi oi-x float-right header-button ml-3" title="Delete" @onclick="DeleteClicked"></i>
        <i class="oi oi-pencil float-right header-button" title="Edit Text" @onclick="ShowModal"></i>
    </div>
    <div class="card-body">
        <div class="text-center mb-4">
            <i class="oi oi-clipboard copy-button" title="Copy Text" @onclick="CopyText"></i>
        </div>
        <p class="card-text">@GetDisplayContent()</p>

    </div>
</div>

<Modal Header="Edit Clip" OkButtonText="Save" @ref="ClipModal" OnModalOkayed="SaveEdits" OnModalCancelled="CancelEdits">
    <div>
        <textarea class="w-100" @bind="NewContent"></textarea>
    </div>
</Modal>

@code {

    [Parameter]
    public EventCallback<int> OnClipDeleted { get; set; }

    [Parameter]
    public int ClipId { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public string NewContent { get; set; }

    [Parameter]
    public DateTimeOffset Timestamp { get; set; }

    private Modal ClipModal { get; set; }

    private Task CancelEdits()
    {
        NewContent = Content;
        return Task.CompletedTask;
    }

    private async Task CopyText()
    {
        await ClipboardService.SetClipboardText(Content);
        ToastService.ShowToast("Copied to clipboard!", TimeSpan.FromSeconds(3));
    }

    private async Task DeleteClicked()
    {
        var response = await Http.DeleteAsync($"Clips?id={ClipId}");
        if (response.IsSuccessStatusCode)
        {
            await OnClipDeleted.InvokeAsync(ClipId);
        }
    }

    private string GetDisplayContent()
    {
        if (Content.Length < 500)
        {
            return Content;
        }
        else
        {
            return new string(Content.ToCharArray().Take(500).ToArray()) + " . . .";
        }
    }

    private async Task SaveEdits()
    {
        var updatedClip = new Clip()
        {
            Id = ClipId,
            Contents = NewContent,
            Timestamp = Timestamp
        };
        var response = await Http.PutAsJsonAsync("Clips", updatedClip, System.Threading.CancellationToken.None);
        if (response.IsSuccessStatusCode)
        {
            Content = NewContent;
            StateHasChanged();
        }
    }

    private void ShowModal()
    {
        NewContent = Content;
        ClipModal.ShowModal();
    }

}
